{"version":3,"sources":["../src/jquery-captcha.js"],"names":["$","fn","captcha","settings","_getHtml","ajax","method","url","captchaEndpoint","data","get","c","styleName","_registerUserInputBlurValidation","instance","_getInstance","options","userInputID","on","captchaCode","trim","this","val","length","self","validationUrl","i","success","isCorrect","reloadImage","trigger","_getScript","extend","dataType","cache","_loadScriptIncludes","done","captchaId","_onLoadScriptsSuccess","_useUserInputBlurValidation","undefined","attr","window","botdetect","getInstanceByStyleName","_displayHtml","captchaHtml","element","html","replace","Error","init","getCaptchaId","jQuery"],"mappings":"CAAC,SAASA,GACR,YAEAA,GAAEC,GAAGC,QAAU,SAASC,GAkBtB,QAASC,KACP,MAAOJ,GAAEK,MACPC,OAAQ,MACRC,IAAKJ,EAASK,gBACdC,MACEC,IAAK,OACLC,EAAGC,KAOT,QAASC,KACP,GAAIC,GAAWC,GACVD,IAELd,EAAE,IAAMc,EAASE,QAAQC,aAAaC,GAAG,OAAQ,WAC/C,GAAIC,GAAcnB,EAAEoB,KAAKpB,EAAEqB,MAAMC,MACjC,IAA2B,IAAvBH,EAAYI,OAAhB,CAEA,GAAIC,GAAOH,IACXrB,GAAEK,MACAC,OAAQ,MACRC,IAAKO,EAASW,cACdhB,MACEiB,EAAGP,GAELQ,QAAS,SAAUC,GACZA,GACHd,EAASe,cAEX7B,EAAEwB,GAAMM,QAAQ,mBAAoBF,UAO5C,QAASG,GAAWxB,EAAKS,GAMvB,MALAA,GAAUhB,EAAEgC,QACVC,SAAU,SACVC,OAAO,EACP3B,IAAKA,GACJS,OACIhB,EAAEK,KAAKW,GAIhB,QAASmB,KAEPJ,EADuB5B,EAASK,gBAAkB,uBACnB0B,OAAO,IAAQE,KAAK,WACjD,GAAIC,GAAYrC,EAAE,aAAeY,GAAWU,KAE5CS,GAD2B5B,EAASK,gBAAkB,8BAAgCI,EAAY,MAAQyB,EAAY,SACrFD,KAAKE,KAK1C,QAASC,KACP,GAAIzB,GAAWC,GACf,IAAKD,EACL,WAA+E0B,KAAvExC,EAAE,IAAMc,EAASE,QAAQC,aAAawB,KAAK,wBAIrD,QAASH,KACHC,KACF1B,IAKJ,QAASE,KACP,WAA6ByB,KAArBE,OAAOC,UACXD,OAAOC,UAAUC,uBAAuBhC,GACxC,KAIN,QAASiC,KACPzC,EAASD,EAASK,gBAAiBI,GAAWwB,KAAK,SAASU,GAC1DC,EAAQC,KAAKF,EAAYG,QAAQ,uBAAwB,KACzDd,MAnGJ,GAAIY,GAAU1B,IAEd,IAAuB,IAAnB0B,EAAQxB,OACV,KAAM,IAAI2B,OAAM,2CAGlB,KAAK/C,IAAaA,EAASK,gBACzB,KAAM,IAAI0C,OAAM,2CAIlB/C,GAASK,gBAAkBL,EAASK,gBAAgByC,QAAQ,QAAS,GAErE,IAAIrC,GAAYmC,EAAQtC,KAAK,aAAesC,EAAQtC,KAAK,aAAe,gBAiHxE,OAtBAsC,GAAQI,KAAO,WAEb,MADAN,KACOE,GAITA,EAAQK,aAAe,WACrB,GAAItC,EACJ,QAAKA,EAAWC,KACPD,EAASuB,UAFC,MAQrBU,EAAQlB,YAAc,WACpB,GAAIf,GAAWC,GACXD,IACFA,EAASe,eAINkB,EAAQI,SAGjBE","file":"jquery-captcha.min.js","sourcesContent":["(function($) {\r\n  'use strict';\r\n  \r\n  $.fn.captcha = function(settings) {\r\n    \r\n    var element = this;\r\n    \r\n    if (element.length === 0) {\r\n      throw new Error('Captcha html element cound not be found.');\r\n    }\r\n\r\n    if (!settings || !settings.captchaEndpoint) {\r\n      throw new Error('The captchaEndpoint setting is required.');\r\n    }\r\n    \r\n    // normalize captcha endpoint path\r\n    settings.captchaEndpoint = settings.captchaEndpoint.replace(/\\/+$/g, '');\r\n    \r\n    var styleName = element.data('stylename') ? element.data('stylename') : 'defaultCaptcha';\r\n    \r\n    // get captcha html markup\r\n    function _getHtml() {\r\n      return $.ajax({\r\n        method: 'GET',\r\n        url: settings.captchaEndpoint,\r\n        data: {\r\n          get: 'html',\r\n          c: styleName\r\n        }\r\n      });\r\n    };\r\n    \r\n    // ajax validate captcha on blur event and trigging the \r\n    // custom 'validatecaptcha' event to fire the validation result\r\n    function _registerUserInputBlurValidation() {\r\n      var instance = _getInstance();\r\n      if (!instance) { return; }\r\n      \r\n      $('#' + instance.options.userInputID).on('blur', function() {\r\n        var captchaCode = $.trim($(this).val());\r\n        if (captchaCode.length === 0) { return; }\r\n\r\n        var self = this;\r\n        $.ajax({\r\n          method: 'GET',\r\n          url: instance.validationUrl,\r\n          data: {\r\n            i: captchaCode\r\n          },\r\n          success: function (isCorrect) {\r\n            if (!isCorrect) {\r\n              instance.reloadImage();\r\n            }\r\n            $(self).trigger('validatecaptcha', [isCorrect]);\r\n          }\r\n        });\r\n      });\r\n    };\r\n    \r\n    // a custom of $.getScript(), which lets changing the options\r\n    function _getScript(url, options) {\r\n      options = $.extend({\r\n        dataType: 'script',\r\n        cache: false,\r\n        url: url\r\n      }, options || {});\r\n      return $.ajax(options);\r\n    };\r\n    \r\n    // load botdetect scripts and execute them\r\n    function _loadScriptIncludes() {\r\n      var scriptIncludeUrl = settings.captchaEndpoint + '?get=script-include';\r\n      _getScript(scriptIncludeUrl, { cache: true }).done(function() {\r\n        var captchaId = $('#BDC_VCID_' + styleName).val();\r\n        var initScriptIncludeUrl = settings.captchaEndpoint + '?get=init-script-include&c=' + styleName + '&t=' + captchaId + '&cs=2';\r\n        _getScript(initScriptIncludeUrl).done(_onLoadScriptsSuccess);\r\n      });\r\n    };\r\n    \r\n    // use user input blur validation if the input element has data-correct-captcha attribute\r\n    function _useUserInputBlurValidation() {\r\n      var instance = _getInstance();\r\n      if (!instance) { return; }\r\n      return ($('#' + instance.options.userInputID).attr('data-correct-captcha') !== undefined);\r\n    };\r\n    \r\n    // fire the custom event when botdetect scripts are loaded\r\n    function _onLoadScriptsSuccess() {\r\n      if (_useUserInputBlurValidation()) {\r\n        _registerUserInputBlurValidation();\r\n      }\r\n    }\r\n    \r\n    // get botdetect captcha client-side instance\r\n    function _getInstance() {\r\n      return (window.botdetect !== undefined) \r\n        ? window.botdetect.getInstanceByStyleName(styleName)\r\n        : null;\r\n    };\r\n    \r\n    // display captcha html markup in view\r\n    function _displayHtml() {\r\n      _getHtml(settings.captchaEndpoint, styleName).done(function(captchaHtml) {\r\n        element.html(captchaHtml.replace(/<script.*<\\/script>/g, ''));\r\n        _loadScriptIncludes();\r\n      });\r\n    }\r\n    \r\n    // plugin initialization - we display the captcha html markup in view\r\n    element.init = function() {\r\n      _displayHtml();\r\n      return element;\r\n    };\r\n    \r\n    // captcha id for validating captcha at server-side\r\n    element.getCaptchaId = function() {\r\n      var instance, id = null;\r\n      if ((instance = _getInstance())) {\r\n        return instance.captchaId;\r\n      }\r\n      return id;\r\n    };\r\n    \r\n    // reload new captcha image\r\n    element.reloadImage = function() {\r\n      var instance = _getInstance();\r\n      if (instance) {\r\n        instance.reloadImage();\r\n      }\r\n    };\r\n\r\n    return element.init();\r\n  };\r\n  \r\n}(jQuery));\r\n"]}